name: Maven - Build, Test and Publish Docker Image for Spring Boot with Maven

on:
  workflow_dispatch:
  push:
    branches:
      - 'springBootMaven'

jobs:

  build-test-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Build and Test Image
        run: docker-compose -f devops/docker-compose.yml -p testing up --build --exit-code-from devops

      - name: Optimize and create Final Image
        run: docker build . -f devops/optimize.Dockerfile --tag ghcr.io/the-microservice-dungeon/devops/springbootmavenexample:latest

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Final Image
        run: docker push ghcr.io/the-microservice-dungeon/devops/springbootmavenexample:latest

  deploy:
    needs: build-test-push
    runs-on: ubuntu-latest
    steps:
      - name: stop-pull-run
        uses: appleboy/ssh-action@master
        env:
          IMAGE_NAME: ghcr.io/the-microservice-dungeon/devops/springbootmavenexample:latest
          CONTAINER_NAME: devops
          NETWORK_NAME: devopsNet
        with:
          host: cides03.gm.fh-koeln.de
          username: ${{ secrets.PROD_USER }}
          password: ${{ secrets.PROD_PWD }}
          port: 22
          envs: IMAGE_NAME, CONTAINER_NAME, NETWORK_NAME
          script: |
            pwd
            echo ${{ secrets.PROD_PWD }} | sudo -S docker pull $IMAGE_NAME
            echo ${{ secrets.PROD_PWD }} | sudo -S docker stop $CONTAINER_NAME
            echo ${{ secrets.PROD_PWD }} | sudo -S docker rm  $CONTAINER_NAME
            echo ${{ secrets.PROD_PWD }} | sudo -S docker run --name $CONTAINER_NAME --network $NETWORK_NAME -p 8085:8080 -d $IMAGE_NAME